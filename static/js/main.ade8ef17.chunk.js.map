{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","protoType","PropTypes","string","isRequired","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","feedback","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAGMA,EAAU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SACtB,OACK,qCACG,6BAAKD,IACJC,MAKXF,EAAQG,UAAY,CAChBF,MAAOG,IAAUC,OAAOC,YAIbN,QCUAO,EAvBS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC/B,OACF,mCACED,EAAQE,KAAI,SAACC,GAAD,OACZ,wBAEYC,KAAK,SACLC,KAAMF,EACNG,QAAS,WACpBL,EAAgBE,IALjB,SAOEA,GANeA,SCiBJI,EAvBE,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACE,8BACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,cCAKC,EARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAChB,4BAAIA,KCGM,SAASC,IAEtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAeMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAO1B,OACE,qCACE,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEO,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAzBY,SAAAoB,GAClB,OAAQA,GACN,IAAK,OAAQ,OAAOJ,EAAQT,EAAO,GAEnC,IAAK,UAAW,OAAOU,EAAWT,EAAU,GAE5C,IAAK,MAAO,OAAOU,EAAOT,EAAM,GAEhC,QAAS,aAoBT,cAAC,EAAD,CAASjB,MAAO,aAAhB,SAE4B,IAAzB2B,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAQA,EACRC,QAAWA,EACXC,IAAOA,EACPC,MAASS,IACTR,mBArBDU,KAAKC,MAAc,IAAPf,EAAcY,YCzBrCI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFY,SAASC,eAAe,W","file":"static/js/main.ade8ef17.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Section = ({title,children}) => {\n  return(\n       <>\n          <h2>{title}</h2>\n          {children}\n       </> \n  ) \n}\n\nSection.protoType = {\n    title: PropTypes.string.isRequired,\n   \n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n//import shortid from 'shortid';\n\nconst FeedbackOptions = ({options, onLeaveFeedback }) => {\n    return (\n\t\t<>\n\t\t\t{options.map((option) => (\n\t\t\t\t<button\n                key={option} \n                type='button' \n                name={option} \n                onClick={() => {\n\t\t\t\t\tonLeaveFeedback(option);\n\t\t\t\t  }} >\n\t\t\t\t\t{option}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired\n}\n\nexport default FeedbackOptions\n","import React from  \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n    return (\n      <div>\n        <ul >\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive feedback: {positivePercentage} %\n          </li>\n        </ul>\n      </div>\n    );\n  };\n  \n  Statistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n  };\n  \n  export default Statistics;\n\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) =>(\n     <p>{message}</p>\n); \n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default Notification;","import { useState } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nexport default function App() {\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n\n  const addFeedback = feedback => {\n    switch (feedback) {\n      case 'good': return setGood(good + 1);\n\n      case 'neutral': return setNeutral(neutral + 1);\n\n      case 'bad': return setBad(bad + 1);\n\n      default: return\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good * 100) / countTotalFeedback())\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={addFeedback} />\n      </Section>\n\n      <Section title={'Statistics'}>\n\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good = {good}\n            neutral = {neutral}\n            bad = {bad}\n            total = {countTotalFeedback()}\n            positivePercentage = {countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}